// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.school.ui.admin.controller;

import com.school.base.domain.BloodGroup;
import com.school.base.domain.Caste;
import com.school.base.domain.City;
import com.school.base.domain.Country;
import com.school.base.domain.Gender;
import com.school.base.domain.Language;
import com.school.base.domain.Religion;
import com.school.base.domain.School;
import com.school.base.domain.SchoolAcademic;
import com.school.base.domain.SchoolClassSection;
import com.school.base.domain.SchoolFee;
import com.school.base.domain.SchoolGroup;
import com.school.base.domain.Sms;
import com.school.base.domain.Staff;
import com.school.base.domain.State;
import com.school.base.domain.Student;
import com.school.base.domain.StudentAttedance;
import com.school.base.domain.StudentClassHistory;
import com.school.base.domain.StudentExamination;
import com.school.base.domain.StudentGroup;
import com.school.base.domain.StudentLogin;
import com.school.ui.admin.controller.SampleController;
import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect StudentController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String SampleController.create(@Valid Student student, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, student);
            return "students/create";
        }
        uiModel.asMap().clear();
        student.persist();
        return "redirect:/students/" + encodeUrlPathSegment(student.getStudentId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String SampleController.createForm(Model uiModel) {
        populateEditForm(uiModel, new Student());
        return "students/create";
    }
    
    @RequestMapping(value = "/{studentId}", produces = "text/html")
    public String SampleController.show(@PathVariable("studentId") Integer studentId, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("student", Student.findStudent(studentId));
        uiModel.addAttribute("itemId", studentId);
        return "students/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String SampleController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("students", Student.findStudentEntries(firstResult, sizeNo, sortFieldName, sortOrder));
            float nrOfPages = (float) Student.countStudents() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("students", Student.findAllStudents(sortFieldName, sortOrder));
        }
        addDateTimeFormatPatterns(uiModel);
        return "students/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String SampleController.update(@Valid Student student, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, student);
            return "students/update";
        }
        uiModel.asMap().clear();
        student.merge();
        return "redirect:/students/" + encodeUrlPathSegment(student.getStudentId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{studentId}", params = "form", produces = "text/html")
    public String SampleController.updateForm(@PathVariable("studentId") Integer studentId, Model uiModel) {
        populateEditForm(uiModel, Student.findStudent(studentId));
        return "students/update";
    }
    
    @RequestMapping(value = "/{studentId}", method = RequestMethod.DELETE, produces = "text/html")
    public String SampleController.delete(@PathVariable("studentId") Integer studentId, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        Student student = Student.findStudent(studentId);
        student.remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/students";
    }
    
    void SampleController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("student_dob_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("student_admissiondate_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("student_auditcreateddttime_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("student_auditmodifieddttime_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
    }
    
    void SampleController.populateEditForm(Model uiModel, Student student) {
        uiModel.addAttribute("student", student);
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("bloodgroups", BloodGroup.findAllBloodGroups());
        uiModel.addAttribute("castes", Caste.findAllCastes());
        uiModel.addAttribute("citys", City.findAllCitys());
        uiModel.addAttribute("countrys", Country.findAllCountrys());
        uiModel.addAttribute("genders", Gender.findAllGenders());
        uiModel.addAttribute("languages", Language.findAllLanguages());
        uiModel.addAttribute("religions", Religion.findAllReligions());
        uiModel.addAttribute("schools", School.findAllSchools());
        uiModel.addAttribute("schoolacademics", SchoolAcademic.findAllSchoolAcademics());
        uiModel.addAttribute("schoolclasssections", SchoolClassSection.findAllSchoolClassSections());
        uiModel.addAttribute("schoolfees", SchoolFee.findAllSchoolFees());
        uiModel.addAttribute("schoolgroups", SchoolGroup.findAllSchoolGroups());
        uiModel.addAttribute("smses", Sms.findAllSmses());
        uiModel.addAttribute("staffs", Staff.findAllStaffs());
        uiModel.addAttribute("states", State.findAllStates());
        uiModel.addAttribute("studentattedances", StudentAttedance.findAllStudentAttedances());
        uiModel.addAttribute("studentclasshistorys", StudentClassHistory.findAllStudentClassHistorys());
        uiModel.addAttribute("studentexaminations", StudentExamination.findAllStudentExaminations());
        uiModel.addAttribute("studentgroups", StudentGroup.findAllStudentGroups());
        uiModel.addAttribute("studentlogins", StudentLogin.findAllStudentLogins());
    }
    
    String SampleController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
