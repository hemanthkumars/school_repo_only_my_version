// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.school.base.domain;

import com.school.base.domain.SchoolLogin;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect SchoolLogin_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager SchoolLogin.entityManager;
    
    public static final List<String> SchoolLogin.fieldNames4OrderClauseFilter = java.util.Arrays.asList("");
    
    public static final EntityManager SchoolLogin.entityManager() {
        EntityManager em = new SchoolLogin().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long SchoolLogin.countSchoolLogins() {
        return entityManager().createQuery("SELECT COUNT(o) FROM SchoolLogin o", Long.class).getSingleResult();
    }
    
    public static List<SchoolLogin> SchoolLogin.findAllSchoolLogins() {
        return entityManager().createQuery("SELECT o FROM SchoolLogin o", SchoolLogin.class).getResultList();
    }
    
    public static List<SchoolLogin> SchoolLogin.findAllSchoolLogins(String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM SchoolLogin o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, SchoolLogin.class).getResultList();
    }
    
    public static SchoolLogin SchoolLogin.findSchoolLogin(Integer schoolLoginId) {
        if (schoolLoginId == null) return null;
        return entityManager().find(SchoolLogin.class, schoolLoginId);
    }
    
    public static List<SchoolLogin> SchoolLogin.findSchoolLoginEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM SchoolLogin o", SchoolLogin.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    public static List<SchoolLogin> SchoolLogin.findSchoolLoginEntries(int firstResult, int maxResults, String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM SchoolLogin o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, SchoolLogin.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void SchoolLogin.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void SchoolLogin.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            SchoolLogin attached = SchoolLogin.findSchoolLogin(this.schoolLoginId);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void SchoolLogin.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void SchoolLogin.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public SchoolLogin SchoolLogin.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        SchoolLogin merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
